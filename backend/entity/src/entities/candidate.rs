//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "candidate")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub id: Uuid,
  pub name: String,
  pub image: String,
  pub season: Uuid,
  pub out: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::bingo_candidate::Entity")]
  BingoCandidate,
  #[sea_orm(
    belongs_to = "super::season::Entity",
    from = "Column::Season",
    to = "super::season::Column::Id",
    on_update = "Cascade",
    on_delete = "Cascade"
  )]
  Season,
}

impl Related<super::bingo_candidate::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::BingoCandidate.def()
  }
}

impl Related<super::season::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Season.def()
  }
}

impl Related<super::bingo::Entity> for Entity {
  fn to() -> RelationDef {
    super::bingo_candidate::Relation::Bingo.def()
  }
  fn via() -> Option<RelationDef> {
    Some(super::bingo_candidate::Relation::Candidate.def().rev())
  }
}

impl ActiveModelBehavior for ActiveModel {}
